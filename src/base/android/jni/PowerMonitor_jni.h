// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/PowerMonitor

#ifndef org_chromium_base_PowerMonitor_JNI
#define org_chromium_base_PowerMonitor_JNI

#include <jni.h>
#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kPowerMonitorClassPath[] = "org/chromium/base/PowerMonitor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_PowerMonitor_clazz = NULL;

}  // namespace

namespace base {
namespace android {

static void OnBatteryChargingChanged(JNIEnv* env, jclass jcaller);

static void OnMainActivitySuspended(JNIEnv* env, jclass jcaller);

static void OnMainActivityResumed(JNIEnv* env, jclass jcaller);

// Step 2: method stubs.

static base::subtle::AtomicWord g_PowerMonitor_isBatteryPower = 0;
static jboolean Java_PowerMonitor_isBatteryPower(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PowerMonitor_clazz,
      g_PowerMonitor_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PowerMonitor_clazz,
      "isBatteryPower",

"("
")"
"Z",
      &g_PowerMonitor_isBatteryPower);

  jboolean ret =
      env->CallStaticBooleanMethod(g_PowerMonitor_clazz,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPowerMonitor[] = {
    { "nativeOnBatteryChargingChanged",
"("
")"
"V", reinterpret_cast<void*>(OnBatteryChargingChanged) },
    { "nativeOnMainActivitySuspended",
"("
")"
"V", reinterpret_cast<void*>(OnMainActivitySuspended) },
    { "nativeOnMainActivityResumed",
"("
")"
"V", reinterpret_cast<void*>(OnMainActivityResumed) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_PowerMonitor_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kPowerMonitorClassPath).obj()));

  const int kMethodsPowerMonitorSize = arraysize(kMethodsPowerMonitor);

  if (env->RegisterNatives(g_PowerMonitor_clazz,
                           kMethodsPowerMonitor,
                           kMethodsPowerMonitorSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_PowerMonitor_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_PowerMonitor_JNI
