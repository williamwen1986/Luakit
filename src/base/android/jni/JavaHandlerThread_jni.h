// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/JavaHandlerThread

#ifndef org_chromium_base_JavaHandlerThread_JNI
#define org_chromium_base_JavaHandlerThread_JNI

#include <jni.h>
#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kJavaHandlerThreadClassPath[] =
    "org/chromium/base/JavaHandlerThread";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_JavaHandlerThread_clazz = NULL;

}  // namespace

namespace base {
namespace android {

static void InitializeThread(JNIEnv* env, jobject jcaller,
    jlong nativeJavaHandlerThread,
    jlong nativeEvent);

// Step 2: method stubs.

static base::subtle::AtomicWord g_JavaHandlerThread_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_JavaHandlerThread_create(JNIEnv* env, jstring name) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_JavaHandlerThread_clazz,
      g_JavaHandlerThread_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavaHandlerThread_clazz,
      "create",

"("
"Ljava/lang/String;"
")"
"Lorg/chromium/base/JavaHandlerThread;",
      &g_JavaHandlerThread_create);

  jobject ret =
      env->CallStaticObjectMethod(g_JavaHandlerThread_clazz,
          method_id, name);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_JavaHandlerThread_start = 0;
static void Java_JavaHandlerThread_start(JNIEnv* env, jobject obj, jlong
    nativeThread,
    jlong nativeEvent) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_JavaHandlerThread_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_JavaHandlerThread_clazz,
      "start",

"("
"J"
"J"
")"
"V",
      &g_JavaHandlerThread_start);

     env->CallVoidMethod(obj,
          method_id, nativeThread, nativeEvent);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsJavaHandlerThread[] = {
    { "nativeInitializeThread",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(InitializeThread) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_JavaHandlerThread_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kJavaHandlerThreadClassPath).obj()));

  const int kMethodsJavaHandlerThreadSize =
      arraysize(kMethodsJavaHandlerThread);

  if (env->RegisterNatives(g_JavaHandlerThread_clazz,
                           kMethodsJavaHandlerThread,
                           kMethodsJavaHandlerThreadSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_JavaHandlerThread_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_JavaHandlerThread_JNI
