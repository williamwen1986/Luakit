// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/PathUtils

#ifndef org_chromium_base_PathUtils_JNI
#define org_chromium_base_PathUtils_JNI

#include <jni.h>
#include "base/android/jni_generator/jni_generator_helper.h"
// Step 1: forward declarations.
namespace {
const char kPathUtilsClassPath[] = "org/chromium/base/PathUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_PathUtils_clazz = NULL;

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_PathUtils_getDataDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getDataDirectory(JNIEnv* env, jobject appContext) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getDataDirectory",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_PathUtils_getDataDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id, appContext));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_PathUtils_getDatabaseDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getDatabaseDirectory(JNIEnv* env, jobject appContext) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getDatabaseDirectory",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_PathUtils_getDatabaseDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id, appContext));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_PathUtils_getCacheDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getCacheDirectory(JNIEnv* env, jobject appContext) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getCacheDirectory",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_PathUtils_getCacheDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id, appContext));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_PathUtils_getDownloadsDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getDownloadsDirectory(JNIEnv* env, jobject appContext) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getDownloadsDirectory",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_PathUtils_getDownloadsDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id, appContext));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_PathUtils_getNativeLibraryDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getNativeLibraryDirectory(JNIEnv* env, jobject appContext) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getNativeLibraryDirectory",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_PathUtils_getNativeLibraryDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id, appContext));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_PathUtils_getExternalStorageDirectory = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_PathUtils_getExternalStorageDirectory(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PathUtils_clazz,
      g_PathUtils_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PathUtils_clazz,
      "getExternalStorageDirectory",

"("
")"
"Ljava/lang/String;",
      &g_PathUtils_getExternalStorageDirectory);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_PathUtils_clazz,
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {
  g_PathUtils_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kPathUtilsClassPath).obj()));

  return true;
}

#endif  // org_chromium_base_PathUtils_JNI
